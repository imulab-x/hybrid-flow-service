package io.imulab.astrea.service.flow.hybrid.service

import io.imulab.astrea.sdk.oauth.error.InvalidGrant
import io.imulab.astrea.sdk.oauth.request.OAuthAuthorizeRequest
import io.imulab.astrea.sdk.oauth.reserved.dot
import io.imulab.astrea.sdk.oauth.token.strategy.AuthorizeCodeStrategy

/**
 * Implementation of [AuthorizeCodeStrategy] to append a service id in front of the authorize code generated
 * by another [AuthorizeCodeStrategy]. The code is decorated so that the api gateway can distinguish between code
 * generated by different services. For instance, token request with code generated by the authorize code flow service
 * should only be routed back to the authorize code flow service, not the hybrid flow service, and vice versa.
 *
 * The format of the decoration is `$codePrefix.$code`.
 */
class ServiceAwareAuthorizeCodeStrategy(
    private val codePrefix: String,
    private val delegate: AuthorizeCodeStrategy
) : AuthorizeCodeStrategy {

    override fun computeIdentifier(code: String): String =
        delegate.computeIdentifier(code.substringAfter(dot))

    override suspend fun generateCode(request: OAuthAuthorizeRequest): String =
        codePrefix + dot + delegate.generateCode(request)

    override suspend fun verifyCode(code: String, request: OAuthAuthorizeRequest) {
        if (code.substringBefore(dot) != codePrefix)
            throw InvalidGrant.invalid()
        delegate.verifyCode(code.substringAfter(dot), request)
    }
}